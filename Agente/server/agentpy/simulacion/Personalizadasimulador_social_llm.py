import json
from db_connection import obtener_conexion_db, ejecutar_query
from mongo_connection import MongoDBManager 
from langchain_groq import ChatGroq
from langchain_core.prompts import ChatPromptTemplate
import os
from dotenv import load_dotenv
import uuid
from datetime import datetime
import re
import json

mongo_manager = MongoDBManager()

load_dotenv()

class AgenteSimuladorLlm:
    def __init__(self, api_key):
        self.simulaciones = mongo_manager.obtener_simulaciones()
        self.estado_usuario = {}
        self.chat = ChatGroq(
            temperature=0.7,
            model_name="meta-llama/llama-4-scout-17b-16e-instruct",
            api_key=api_key
        )
        

    def cargar_simulaciones(self, ruta):
        with open(ruta, encoding="utf-8") as f:
            return json.load(f)

    def interactuar(self, user_id, mensaje):
        estado = self.estado_usuario.get(user_id, {"estado": "inicio"})
        print(f"Estado actual del usuario {user_id}: {estado}")
        
        puntaje = estado.get("puntaje", 0)
        print(f"Puntaje actual del usuario {user_id}: {puntaje}")
        
        # Rango de simulaciones seg√∫n el puntaje
        if puntaje > 95:
            rango_simulaciones = [sim for sim in self.simulaciones if sim["id"] == "sim-004"]
        elif 80 <= puntaje <= 95:
            rango_simulaciones = [sim for sim in self.simulaciones if sim["id"] == "sim-003"]
        elif 65 <= puntaje < 80:
            rango_simulaciones = [sim for sim in self.simulaciones if sim["id"] == "sim-002"]
        elif 55 <= puntaje < 65:
            rango_simulaciones = [sim for sim in self.simulaciones if sim["id"] == "sim-001"]
        else:
            rango_simulaciones = []

        if estado["estado"] == "inicio":
            opciones = [
                "1. Simulaci√≥n personalizada (elige una situaci√≥n)"
            ]
            print(f"El usuario {user_id} est√° en estado de inicio, opciones disponibles: {opciones}")
            
            self.estado_usuario[user_id] = {
                "estado": "esperando_tipo_simulacion",
                "datos": {}
            }
            
            mensaje_bienvenida = (
                "üëã ¬°Bienvenido/a al m√≥dulo de simulaci√≥n social!\n\n"
                "Este espacio ha sido dise√±ado para ayudarte a practicar situaciones sociales y reflexionar sobre tus emociones.\n"
                "Elige c√≥mo deseas comenzar:\n"
            )
            
            return {
                "response": mensaje_bienvenida + "\n".join(opciones),
                "status": "awaiting_input"
            }


        elif estado["estado"] == "esperando_tipo_simulacion":
            print(f"El usuario {user_id} ha elegido el tipo de simulaci√≥n: {mensaje.strip()}")
            
            # Si el usuario elige la simulaci√≥n estable
            if mensaje.strip() == "0":
                if not rango_simulaciones:
                    return {"response": "‚ùå No hay simulaciones disponibles para tu puntaje actual.", "status": "awaiting_input"}

                opciones = [f"{i+1}. {sim['titulo']}" for i, sim in enumerate(rango_simulaciones)]
                self.estado_usuario[user_id] = {
                    "estado": "esperando_seleccion",
                    "datos": {}
                }
                return {
                    "response": "üß† **Simulaciones sociales disponibles:**\n" + "\n".join(opciones)
                    + "\n\nEste es tu puntaje en el test de ansiedad social: " + str(puntaje) +
                    "\n\nSelecciona el n√∫mero de la simulaci√≥n que deseas practicar.",
                    "status": "awaiting_input"
                }

            # Si el usuario elige la simulaci√≥n personalizada
            elif mensaje.strip() == "1":
                print(f"El usuario {user_id} ha elegido la simulaci√≥n personalizada.")
                return self._seleccionar_simulacion_personalizada(user_id)

            else:
                return {"response": "‚ùå Opci√≥n no v√°lida. Elige 1 para simulaci√≥n personalizada.", "status": "awaiting_input"}

       
        elif estado["estado"] == "esperando_seleccion_situacion":
            print(f"Procesando selecci√≥n de situaci√≥n personalizada: {mensaje}")
            return self._procesar_seleccion_situacion(user_id, mensaje)
        
        elif estado["estado"] == "procesando_simulacion_personalizada":
            if mensaje.lower().strip() in ["s√≠", "si", "yes", "y"]:
                # Implementar carga de simulaci√≥n existente
                situacion = estado["datos"]["situacion"]
                return self._cargar_simulacion_existente(user_id, situacion)
            else:
                situacion = estado["datos"]["situacion"]
                return self._crear_simulacion_interactiva_con_ia(user_id, situacion)
        elif estado["estado"] == "esperando_respuesta_paso":
            return self._procesar_respuesta(user_id, mensaje)
        # ‚¨ÜÔ∏è Este es el que falta
        else:
            return {
                "response": "‚ùå No se pudo procesar tu mensaje. Intenta nuevamente.",
                "status": "error"
            }
        

    def obtener_situaciones_usuario(self, user_id):
        print(f"Recuperando situaciones para el usuario {user_id}")
        query = """
         SELECT
            u.id AS usuario_id,
            u.seudonimo,
            e.id AS emocion_id,
            e.emocion_identificada,
            e.descripcion AS descripcion_emocion,
            sr.id AS situacion_id,
            sr.descripcion_situacion,
            sr.respuesta_1,
            sr.respuesta_2,
            sr.respuesta_3,
            sr.respuesta_4,
            sr.fecha_respuesta
        FROM
            public.usuarios u
        JOIN public.emociones e ON u.id = e.usuario_id
        JOIN public.situaciones_respuestas sr ON e.id = sr.emocion_id
        WHERE
            u.id = %s;
        """
        try:
            # Ejecutar la consulta para obtener las situaciones asociadas al usuario
            resultados = ejecutar_query(query, (user_id,), tipo="select")

            if resultados:
                print(f"SITUACIONES ENCONTRADAS: {resultados}")
                return resultados
            else:
                return []  # No se encontraron situaciones para el usuario
        except Exception as e:
            print(f"Error al obtener las situaciones del usuario: {e}")
            return []


    def _seleccionar_simulacion_personalizada(self, user_id):
        # Obtener las situaciones personalizadas asociadas al usuario
        print(f"Obteniendo situaciones personalizadas para el usuario {user_id}...")
        situaciones = self.obtener_situaciones_usuario(user_id)
        print(f"Situaciones obtenidas: {situaciones}")
        # Si no hay situaciones personalizadas, informar al usuario
        
        if not situaciones:
            return {"response": "‚ùå No tienes situaciones personalizadas guardadas.", "status": "awaiting_input"}

        # Crear un listado de opciones para que el usuario elija
        opciones = []
        for i, situacion in enumerate(situaciones):
            opciones.append(f"{i+1}. {situacion[7]}")  # Mostrar la descripci√≥n de la situaci√≥n
        
        # Guardar el estado en espera de la selecci√≥n
        self.estado_usuario[user_id] = {
            "estado": "esperando_seleccion_situacion",  # Estado esperando la selecci√≥n
            "datos": {}
        }

        # Devolver la respuesta con las opciones
        return {
            "response": "üß† **Situaciones personalizadas disponibles:**\n" + "\n".join(opciones) +
                        "\n\nSelecciona el n√∫mero de la situaci√≥n que deseas simular.",
            "status": "awaiting_input"
        }

    def _procesar_seleccion_situacion(self, user_id, mensaje):
        # Verifica que el mensaje sea una opci√≥n v√°lida
        try:
            situacion_id = int(mensaje.strip()) - 1  # El √≠ndice de la situaci√≥n seleccionada
            situaciones = self.obtener_situaciones_usuario(user_id)
            
            if situacion_id < 0 or situacion_id >= len(situaciones):
                return {"response": "‚ùå Selecci√≥n inv√°lida. Elige un n√∫mero de situaci√≥n v√°lido.", "status": "awaiting_input"}

            situacion = situaciones[situacion_id][7]  # Descripci√≥n de la situaci√≥n seleccionada

            # Llamar a la funci√≥n que genera la simulaci√≥n interactiva
            return self.crear_simulacion_interactiva(user_id, situacion)

        except ValueError:
            return {"response": "‚ùå Entrada inv√°lida. Por favor selecciona un n√∫mero de situaci√≥n.", "status": "awaiting_input"}

    def crear_simulacion_interactiva(self, user_id, situacion):
        print(f"Creando simulaci√≥n interactiva para el usuario {user_id} con la situaci√≥n: {situacion}.")
        
        # Verificamos si ya existe una simulaci√≥n para esta situaci√≥n
        simulacion_existente = self._verificar_simulacion_existente(user_id, situacion)
        if simulacion_existente:
            print(f"Simulaci√≥n existente encontrada para la situaci√≥n '{situacion}'.")
            return {
                "response": f"üß† **Ya has creado una simulaci√≥n para esta situaci√≥n anteriormente.** ¬øQuieres probarla nuevamente?",
                "status": "awaiting_input"
            }

        # Si la simulaci√≥n no existe, seguimos con la creaci√≥n
        print("No existe simulaci√≥n previa, continuando con la creaci√≥n.")

        # Mensaje de inicio para el usuario
        mensaje_creando = "üß† **Se est√° creando la simulaci√≥n para la situaci√≥n seleccionada...** Esto tomar√° un momento."
        
        # Enviar este mensaje de creaci√≥n al usuario
        self.estado_usuario[user_id] = {
            "estado": "creando_simulacion",
            "datos": {"situacion": situacion}
        }
        
        print(f"Mensaje de creaci√≥n enviado al usuario {user_id}: {mensaje_creando}")

        # Crear el prompt para la IA basado en la situaci√≥n proporcionada
        prompt = f"""
            Eres un asistente emp√°tico. El usuario ha descrito la siguiente situaci√≥n: {situacion}.
            Crea una simulaci√≥n paso a paso para ayudar al usuario a reflexionar sobre su situaci√≥n.
            Cada paso debe tener:
            1. Una breve descripci√≥n de la situaci√≥n.
            2. Al menos 3 opciones de respuesta, numeradas y detalladas.
            3. Aseg√∫rate de que las opciones sean claras y ofrezcan alternativas v√°lidas que permitan al usuario reflexionar sobre posibles soluciones o decisiones.
            
            Ejemplo de simulaci√≥n:

            **Paso 1:**
            Situaci√≥n: Te encuentras en una reuni√≥n de trabajo. Todos los ojos est√°n sobre ti. Te sientes nervioso y tus manos comienzan a sudar. El jefe te pide que presentes el informe que preparaste.
            Opciones:
            1. Respirar profundamente y calmarme antes de hablar.
            2. Mirar al jefe directamente y comenzar a hablar sin detenerme.
            3. Pedir una peque√±a pausa para tomar agua y recomponerme.

            **Paso 2:**
            Situaci√≥n: Has comenzado a hablar, pero de repente te quedas en blanco. La ansiedad te hace sentir que todos te est√°n observando.
            Opciones:
            1. Continuar hablando aunque sea dif√≠cil, porque sabes que el informe es importante.
            2. Hacer una pausa y pedir un momento para reflexionar.
            3. Pedir a otro compa√±ero que contin√∫e la presentaci√≥n por un momento mientras tomas un respiro.

            **Paso 3:**
            Situaci√≥n: La reuni√≥n contin√∫a y ya no sientes tanta ansiedad. Te das cuenta de que la gente est√° prestando atenci√≥n a lo que est√°s diciendo.
            Opciones:
            1. Aprovechar la oportunidad para expresar ideas adicionales que no hab√≠as planeado.
            2. Seguir con el plan original sin desviarme.
            3. Hacer una breve pausa para asegurarme de que todos me han entendido.
            
            ---
            Aseg√∫rate de que la simulaci√≥n que generes tenga varios pasos, con descripciones y opciones de respuesta similares a este ejemplo. La simulaci√≥n debe ser interactiva y ayudar al usuario a reflexionar sobre su situaci√≥n, tomando decisiones que los gu√≠en a trav√©s de diferentes escenarios.
        """
        
        try:
            print("Se est√° creando la simulaci√≥n para la situaci√≥n elegida.")
            respuesta = self.chat.invoke([
                ("system", "Eres un asistente emp√°tico que ayuda a las personas a reflexionar sobre sus emociones."),
                ("human", prompt)
            ])

            # Procesar la respuesta de la IA y generar los escenarios
            simulacion_generada = respuesta.content.strip()
            escenarios = self._generar_escenarios_desde_ia(simulacion_generada)
            
            if not escenarios:
                return {
                    "response": "‚ùå No se pudieron generar pasos v√°lidos para esta situaci√≥n. Intenta con otra descripci√≥n o m√°s detalles.",
                    "status": "awaiting_input"
                }
            # Crear la simulaci√≥n en formato estructurado (como un objeto JSON)
            simulacion = {
                "id": str(uuid.uuid4()),  # ID √∫nico para la simulaci√≥n
                "titulo": f"Simulaci√≥n: {situacion[:30]}...",  # T√≠tulo corto para mostrar al usuario
                "descripcion": f"Simulaci√≥n personalizada generada para la situaci√≥n: {situacion}",
                "escenarios": escenarios,  # Los pasos generados por la IA
                "usuario_id": user_id , # A√±adir el ID del usuario
                "fecha_creacion": str(datetime.now())  # Fecha de creaci√≥n
            }

            # Convertir la simulaci√≥n a formato JSON (como un objeto, no un archivo)
            simulacion_json = json.dumps(simulacion, indent=4)
            
            # Mostrar el JSON para depuraci√≥n, puedes eliminar esta l√≠nea en producci√≥n
            print("Simulaci√≥n personalizada generada con √©xito.")
            print(f"Simulaci√≥n generada: {simulacion_json}")

            # Guardar la simulaci√≥n en la base de datos (MongoDB)
            mongo_manager.guardar_simulacion(simulacion)
            
            # Configurar el estado del usuario con la simulaci√≥n reci√©n generada
            self.estado_usuario[user_id] = {
                "estado": "esperando_respuesta_paso",  # Cambiar el estado a "esperando_respuesta_paso"
                "simulacion": simulacion,  # Guardar la simulaci√≥n en el estado del usuario
                "paso_actual": 0,  # Comenzamos desde el primer paso
                "respuestas": []  # Respuestas vac√≠as inicialmente
            }

            # Responder al usuario con el primer paso de la simulaci√≥n
            return self._mostrar_paso(user_id, f"üéØ **Simulaci√≥n generada sobre: {situacion[:30]}**\n{simulacion['descripcion']}")

        except Exception as e:
            # Capturamos cualquier error en el proceso
            print(f"Error al generar simulaci√≥n interactiva: {e}")
            return {"response": "‚ùå Hubo un problema generando la simulaci√≥n. Intenta nuevamente.", "status": "awaiting_input"}



    def _generar_escenarios_desde_ia(self, simulacion_generada):
        print("Procesando simulaci√≥n generada por la IA...")

        escenarios = []

        # Dividir el texto por pasos (por ejemplo: "**Paso 1:**")
        pasos_raw = re.split(r"\*\*Paso \d+\:\*\*", simulacion_generada)
        print(f"{len(pasos_raw)-1} pasos detectados.")

        for paso in pasos_raw:
            paso = paso.strip()
            if not paso:
                continue

            # Buscar la situaci√≥n y sus opciones (hasta 3)
            match = re.search(r"Situaci√≥n:\s*(.*?)\s*Opciones:\s*((?:\d+\.\s.*\n?)+)", paso, re.DOTALL)
            if match:
                descripcion = match.group(1).strip()
                opciones_raw = match.group(2).strip()

                # Extraer l√≠neas que empiecen con n√∫mero + punto (opciones)
                opciones = re.findall(r"\d+\.\s[^\n]+", opciones_raw)

                if len(opciones) >= 3:
                    escenarios.append({
                        "situacion": descripcion,
                        "opciones": opciones[:3]  # limitamos a 3 opciones para coherencia
                    })
                else:
                    print("‚ö†Ô∏è Paso ignorado: menos de 3 opciones detectadas.")
            else:
                print("‚ö†Ô∏è No se pudo analizar un paso correctamente. Paso omitido.")

        print(f"‚úÖ Escenarios v√°lidos generados: {len(escenarios)}")
        return escenarios






   
    def _verificar_simulacion_existente(self, user_id, situacion):
        print(f"Verificando si ya existe una simulaci√≥n para la situaci√≥n '{situacion}' y el usuario {user_id}")
        # Consultar en la base de datos si ya existe una simulaci√≥n para la misma situaci√≥n y el mismo usuario
        query = """
        SELECT * FROM public.simulaciones
        WHERE usuario_id = %s AND descripcion LIKE %s
        """
        try:
            # Ejecutar la consulta para verificar si ya existe la simulaci√≥n
            resultados = ejecutar_query(query, (user_id, f"%{situacion}%"), tipo="select")
            print(f"Simulaciones existentes para el usuario {user_id}: {resultados}")
            return resultados  # Si hay resultados, significa que la simulaci√≥n ya existe
        except Exception as e:
            print(f"Error al verificar si la simulaci√≥n existe: {e}")
            return None

   
    def guardar_resultado(self, user_id, escenario, opcion_texto, comentario):
        query = """
            INSERT INTO public.simulaciones (id, usuario_id, escenario, opcion_elegida, comentario_final, fecha)
            VALUES (%s, %s, %s, %s, %s, %s)
        """
        params = (
            str(uuid.uuid4()),           # id
            str(user_id),                # usuario_id
            escenario,                   # texto del escenario
            opcion_texto,                # opci√≥n elegida
            comentario,                  # generado por el LLM
            datetime.now()               # timestamp
        )
        
        ejecutar_query(query, params, tipo="insert")




    def _mostrar_paso(self, user_id, mensaje_inicial=""):
        estado = self.estado_usuario[user_id]
        paso_actual = estado.get("paso_actual", 0)
        simulacion = estado["simulacion"]
        escenarios = simulacion["escenarios"]

        if not escenarios or paso_actual >= len(escenarios):
            return {
                "response": "‚ùå No hay pasos disponibles en esta simulaci√≥n.",
                "status": "completed"
            }

        if paso_actual >= len(escenarios):
            return {
                "response": "‚úÖ Has completado todos los pasos de la simulaci√≥n.",
                "status": "completed"
            }

        paso = escenarios[paso_actual]
        situacion = paso["situacion"]
        opciones = "\n".join(paso["opciones"])

        mensaje = f"{mensaje_inicial}\n\n**Paso {paso_actual + 1}:**\n{situacion}\n\nOpciones:\n{opciones}"
        
        return {
            "response": mensaje,
            "status": "awaiting_choice"
        }


    def _procesar_respuesta(self, user_id, mensaje):
        datos = self.estado_usuario[user_id]

        # Si ya dio una respuesta y ahora est√° escribiendo "continuar"
        if datos.get("esperando_continuar"):
            datos["esperando_continuar"] = False  # Ya puede continuar
            paso_idx = datos["paso_actual"]
            sim = datos["simulacion"]

            if paso_idx < len(sim["escenarios"]):
                return self._mostrar_paso(user_id)
            else:
                self.estado_usuario[user_id] = {"estado": "inicio"}
                return {
                    "response": "üéâ **Has completado la simulaci√≥n.** Gracias por participar. ¬øQuieres probar otra?",
                    "status": "completed"
                }

        # Procesar la respuesta inicial del paso
        sim = datos["simulacion"]
        paso_idx = datos["paso_actual"]
        paso = sim["escenarios"][paso_idx]

        try:
            opcion_idx = int(mensaje.strip()) - 1
            opcion_elegida = paso["opciones"][opcion_idx]
            datos["respuestas"].append(opcion_idx)

            feedback = self._generar_feedback_llm(paso["situacion"], opcion_elegida)

            try:
                self.guardar_resultado(
                    user_id=user_id,
                    escenario=paso["situacion"],
                    opcion_texto=opcion_elegida,
                    comentario=feedback
                )
            except Exception as e:
                print(f"‚ùå Error al guardar resultado de simulaci√≥n: {e}")
            # Guardamos que estamos esperando que diga "continuar"
            datos["esperando_continuar"] = True
            datos["paso_actual"] += 1  # Aumentamos ya el paso

            return {
                "response": f"‚úÖ {feedback}\n\n‚úèÔ∏è Cuando est√©s listo, escribe **\"continuar\"** para pasar al siguiente paso.",
                "status": "awaiting_input"
            }

        except (ValueError, IndexError):
            return {
                "response": "‚ùå Entrada inv√°lida. Elige un n√∫mero v√°lido seg√∫n las opciones.",
                "status": "awaiting_input"
            }



    def _generar_feedback_llm(self, situacion, opcion_elegida):
        prompt = ChatPromptTemplate.from_messages([
            ("system", "Eres un asistente emp√°tico que ayuda a las personas a reflexionar sobre sus elecciones sociales. S√© c√°lido, respetuoso y claro."),
            ("human", f"""Escenario: {situacion}
                Respuesta elegida: {opcion_elegida}

            Escribe un comentario amable, comprensivo y √∫til para esta elecci√≥n. Evita juzgar. Anima al usuario a reflexionar o continuar desarrollando habilidades sociales.""")
        ])

        mensajes = prompt.format_messages()

        try:
            respuesta = self.chat.invoke(mensajes)
            return respuesta.content.strip()
        except Exception as e:
            return "Gracias por tu respuesta. Continuemos con el siguiente paso."

